{"ast":null,"code":"var _jsxFileName = \"/Users/wavestar/Hegemon/src/WebGLBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebGLBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current || sceneRef.current) return;\n    console.log('Initializing WebGL...');\n\n    // Store mount reference\n    const currentMount = mountRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n\n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // WHITE background\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0';\n    renderer.domElement.style.left = '0';\n    renderer.domElement.style.width = '100vw';\n    renderer.domElement.style.height = '100vh';\n    renderer.domElement.style.zIndex = '1';\n    currentMount.appendChild(renderer.domElement);\n    console.log('Canvas added to DOM:', currentMount.contains(renderer.domElement));\n    console.log('Canvas element:', renderer.domElement);\n    console.log('Canvas size:', window.innerWidth, 'x', window.innerHeight);\n\n    // Store scene reference to prevent double initialization\n    sceneRef.current = scene;\n\n    // Create a HUGE test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(10, 10, 10);\n    const testMaterial = new THREE.MeshPhongMaterial({\n      color: 0x333333,\n      shininess: 30,\n      specular: 0x222222\n    });\n    const testCube = new THREE.Mesh(testGeometry, testMaterial);\n    testCube.position.set(0, 0, 0);\n    testCube.userData = {\n      originalPosition: new THREE.Vector3(0, 0, 0),\n      velocity: new THREE.Vector3(0, 0, 0)\n    };\n    scene.add(testCube);\n\n    // Create floating spheres (data nodes) - BIGGER and CLOSER\n    const spheres = [];\n    for (let i = 0; i < 10; i++) {\n      const geometry = new THREE.SphereGeometry(3, 32, 32); // Higher resolution for smoothness\n      const material = new THREE.MeshPhongMaterial({\n        color: 0x404040,\n        shininess: 60,\n        specular: 0x333333\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set((Math.random() - 0.5) * 30, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 15);\n      sphere.userData = {\n        originalPosition: sphere.position.clone(),\n        originalY: sphere.position.y,\n        speed: 0.1 + Math.random() * 0.2,\n        // Much slower\n        phase: Math.random() * Math.PI * 2,\n        velocity: new THREE.Vector3(0, 0, 0)\n      };\n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n\n    // Create solid geometric shapes (not wireframe for better 3D effect)\n    const shapes = [];\n    const geometries = [new THREE.OctahedronGeometry(1.5, 1),\n    // Higher detail\n    new THREE.TetrahedronGeometry(2, 1), new THREE.IcosahedronGeometry(1.2, 1)];\n    for (let i = 0; i < 15; i++) {\n      const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshPhongMaterial({\n        color: 0x505050,\n        shininess: 40,\n        specular: 0x222222,\n        wireframe: false // Solid shapes for better 3D appearance\n      });\n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set((Math.random() - 0.5) * 40, (Math.random() - 0.5) * 25, (Math.random() - 0.5) * 25);\n      shape.userData = {\n        originalPosition: shape.position.clone(),\n        rotationSpeed: new THREE.Vector3((Math.random() - 0.5) * 0.005,\n        // Much slower rotation\n        (Math.random() - 0.5) * 0.005, (Math.random() - 0.5) * 0.005),\n        velocity: new THREE.Vector3(0, 0, 0)\n      };\n      shapes.push(shape);\n      scene.add(shape);\n    }\n\n    // Position camera MUCH closer\n    camera.position.set(0, 0, 30);\n    camera.lookAt(0, 0, 0);\n\n    // Mouse interaction setup\n    const mouse = new THREE.Vector2();\n    const raycaster = new THREE.Raycaster();\n    let mouseX = 0;\n    let mouseY = 0;\n    const onMouseMove = event => {\n      mouseX = event.clientX / window.innerWidth * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n      mouse.x = mouseX;\n      mouse.y = mouseY;\n      raycaster.setFromCamera(mouse, camera);\n\n      // Check intersections with all interactive objects\n      const allObjects = [...spheres, ...shapes, testCube];\n      const intersects = raycaster.intersectObjects(allObjects);\n      if (intersects.length > 0) {\n        const intersectedObject = intersects[0].object;\n        // Apply gentle push force\n        const force = raycaster.ray.direction.clone().multiplyScalar(0.5);\n        intersectedObject.userData.velocity = intersectedObject.userData.velocity || new THREE.Vector3();\n        intersectedObject.userData.velocity.add(force);\n      }\n    };\n    window.addEventListener('mousemove', onMouseMove);\n\n    // Animation\n    let animationId;\n    let time = 0;\n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n\n      // Rotate test cube (slower)\n      testCube.rotation.x += 0.002;\n      testCube.rotation.y += 0.003;\n\n      // Apply physics to test cube\n      if (testCube.userData.velocity.length() > 0) {\n        testCube.position.add(testCube.userData.velocity);\n        testCube.userData.velocity.multiplyScalar(0.95); // Damping\n\n        // Return to original position slowly\n        const returnForce = testCube.userData.originalPosition.clone().sub(testCube.position).multiplyScalar(0.02);\n        testCube.userData.velocity.add(returnForce);\n      }\n\n      // Animate spheres with physics\n      spheres.forEach(sphere => {\n        const userData = sphere.userData;\n\n        // Gentle floating motion (much slower)\n        sphere.position.y = userData.originalY + Math.sin(time * userData.speed + userData.phase) * 1;\n        sphere.rotation.x += 0.001;\n        sphere.rotation.y += 0.002;\n\n        // Apply mouse interaction physics\n        if (userData.velocity.length() > 0) {\n          sphere.position.add(userData.velocity);\n          userData.velocity.multiplyScalar(0.95); // Damping\n\n          // Return to original position slowly\n          const returnForce = userData.originalPosition.clone().sub(sphere.position).multiplyScalar(0.01);\n          userData.velocity.add(returnForce);\n        }\n      });\n\n      // Animate shapes with physics\n      shapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n\n        // Apply mouse interaction physics\n        if (userData.velocity.length() > 0) {\n          shape.position.add(userData.velocity);\n          userData.velocity.multiplyScalar(0.95); // Damping\n\n          // Return to original position slowly\n          const returnForce = userData.originalPosition.clone().sub(shape.position).multiplyScalar(0.01);\n          userData.velocity.add(returnForce);\n        }\n      });\n\n      // Very gentle camera movement (much slower)\n      camera.position.x = Math.sin(time * 0.02) * 3;\n      camera.position.y = Math.cos(time * 0.03) * 2;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n\n      // Debug log every 60 frames\n      if (Math.floor(time * 100) % 60 === 0) {\n        console.log('WebGL rendering... cube rotation:', testCube.rotation.x.toFixed(2));\n      }\n    };\n\n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Add proper lighting for 3D shading\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight1.position.set(10, 10, 5);\n    scene.add(directionalLight1);\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.3);\n    directionalLight2.position.set(-10, -10, -5);\n    scene.add(directionalLight2);\n    console.log('Starting WebGL animation...');\n    animate();\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up WebGL...');\n      sceneRef.current = null;\n      window.removeEventListener('resize', handleResize);\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n\n      // Clean up Three.js objects\n      scene.traverse(object => {\n        if (object.geometry) {\n          object.geometry.dispose();\n        }\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n      renderer.dispose();\n\n      // Remove canvas from DOM\n      if (currentMount && currentMount.contains(renderer.domElement)) {\n        currentMount.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      zIndex: 1,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(WebGLBackground, \"fTngvglZ51/ZfcBvyjlXBMMFK9c=\");\n_c = WebGLBackground;\nexport default WebGLBackground;\nvar _c;\n$RefreshReg$(_c, \"WebGLBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","WebGLBackground","_s","mountRef","sceneRef","current","console","log","currentMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","setClearColor","domElement","style","position","top","left","width","height","zIndex","appendChild","contains","testGeometry","BoxGeometry","testMaterial","MeshPhongMaterial","color","shininess","specular","testCube","Mesh","set","userData","originalPosition","Vector3","velocity","add","spheres","i","geometry","SphereGeometry","material","sphere","Math","random","clone","originalY","y","speed","phase","PI","push","shapes","geometries","OctahedronGeometry","TetrahedronGeometry","IcosahedronGeometry","floor","length","wireframe","shape","rotationSpeed","lookAt","mouse","Vector2","raycaster","Raycaster","mouseX","mouseY","onMouseMove","event","clientX","clientY","x","setFromCamera","allObjects","intersects","intersectObjects","intersectedObject","object","force","ray","direction","multiplyScalar","addEventListener","animationId","time","animate","requestAnimationFrame","rotation","returnForce","sub","forEach","sin","z","cos","render","toFixed","handleResize","aspect","updateProjectionMatrix","ambientLight","AmbientLight","directionalLight1","DirectionalLight","directionalLight2","removeEventListener","cancelAnimationFrame","traverse","dispose","Array","isArray","removeChild","ref","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wavestar/Hegemon/src/WebGLBackground.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst WebGLBackground = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n\n  useEffect(() => {\n    if (!mountRef.current || sceneRef.current) return;\n    \n    console.log('Initializing WebGL...');\n    \n    // Store mount reference\n    const currentMount = mountRef.current;\n    \n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    \n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // WHITE background\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0';\n    renderer.domElement.style.left = '0';\n    renderer.domElement.style.width = '100vw';\n    renderer.domElement.style.height = '100vh';\n    renderer.domElement.style.zIndex = '1';\n    currentMount.appendChild(renderer.domElement);\n    \n    console.log('Canvas added to DOM:', currentMount.contains(renderer.domElement));\n    console.log('Canvas element:', renderer.domElement);\n    console.log('Canvas size:', window.innerWidth, 'x', window.innerHeight);\n    \n    // Store scene reference to prevent double initialization\n    sceneRef.current = scene;\n    \n    // Create a HUGE test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(10, 10, 10);\n    const testMaterial = new THREE.MeshPhongMaterial({ \n      color: 0x333333,\n      shininess: 30,\n      specular: 0x222222\n    });\n         const testCube = new THREE.Mesh(testGeometry, testMaterial);\n     testCube.position.set(0, 0, 0);\n     testCube.userData = {\n       originalPosition: new THREE.Vector3(0, 0, 0),\n       velocity: new THREE.Vector3(0, 0, 0)\n     };\n     scene.add(testCube);\n    \n              // Create floating spheres (data nodes) - BIGGER and CLOSER\n     const spheres = [];\n     for (let i = 0; i < 10; i++) {\n       const geometry = new THREE.SphereGeometry(3, 32, 32); // Higher resolution for smoothness\n       const material = new THREE.MeshPhongMaterial({\n         color: 0x404040,\n         shininess: 60,\n         specular: 0x333333\n       });\n       \n       const sphere = new THREE.Mesh(geometry, material);\n       sphere.position.set(\n         (Math.random() - 0.5) * 30,\n         (Math.random() - 0.5) * 20,\n         (Math.random() - 0.5) * 15\n       );\n      \n             sphere.userData = {\n         originalPosition: sphere.position.clone(),\n         originalY: sphere.position.y,\n         speed: 0.1 + Math.random() * 0.2, // Much slower\n         phase: Math.random() * Math.PI * 2,\n         velocity: new THREE.Vector3(0, 0, 0)\n       };\n      \n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n    \n         // Create solid geometric shapes (not wireframe for better 3D effect)\n     const shapes = [];\n     const geometries = [\n       new THREE.OctahedronGeometry(1.5, 1), // Higher detail\n       new THREE.TetrahedronGeometry(2, 1),\n       new THREE.IcosahedronGeometry(1.2, 1)\n     ];\n     \n     for (let i = 0; i < 15; i++) {\n       const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n       const material = new THREE.MeshPhongMaterial({\n         color: 0x505050,\n         shininess: 40,\n         specular: 0x222222,\n         wireframe: false // Solid shapes for better 3D appearance\n       });\n      \n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set(\n        (Math.random() - 0.5) * 40,\n        (Math.random() - 0.5) * 25,\n        (Math.random() - 0.5) * 25\n      );\n      \n             shape.userData = {\n         originalPosition: shape.position.clone(),\n         rotationSpeed: new THREE.Vector3(\n           (Math.random() - 0.5) * 0.005, // Much slower rotation\n           (Math.random() - 0.5) * 0.005,\n           (Math.random() - 0.5) * 0.005\n         ),\n         velocity: new THREE.Vector3(0, 0, 0)\n       };\n      \n      shapes.push(shape);\n      scene.add(shape);\n    }\n    \n             // Position camera MUCH closer\n    camera.position.set(0, 0, 30);\n    camera.lookAt(0, 0, 0);\n\n    // Mouse interaction setup\n    const mouse = new THREE.Vector2();\n    const raycaster = new THREE.Raycaster();\n    let mouseX = 0;\n    let mouseY = 0;\n\n    const onMouseMove = (event) => {\n      mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n      \n      mouse.x = mouseX;\n      mouse.y = mouseY;\n      \n      raycaster.setFromCamera(mouse, camera);\n      \n      // Check intersections with all interactive objects\n      const allObjects = [...spheres, ...shapes, testCube];\n      const intersects = raycaster.intersectObjects(allObjects);\n      \n      if (intersects.length > 0) {\n        const intersectedObject = intersects[0].object;\n        // Apply gentle push force\n        const force = raycaster.ray.direction.clone().multiplyScalar(0.5);\n        intersectedObject.userData.velocity = intersectedObject.userData.velocity || new THREE.Vector3();\n        intersectedObject.userData.velocity.add(force);\n      }\n    };\n\n    window.addEventListener('mousemove', onMouseMove);\n    \n    // Animation\n    let animationId;\n    let time = 0;\n    \n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n      \n             // Rotate test cube (slower)\n       testCube.rotation.x += 0.002;\n       testCube.rotation.y += 0.003;\n       \n       // Apply physics to test cube\n       if (testCube.userData.velocity.length() > 0) {\n         testCube.position.add(testCube.userData.velocity);\n         testCube.userData.velocity.multiplyScalar(0.95); // Damping\n         \n         // Return to original position slowly\n         const returnForce = testCube.userData.originalPosition.clone().sub(testCube.position).multiplyScalar(0.02);\n         testCube.userData.velocity.add(returnForce);\n       }\n       \n       // Animate spheres with physics\n       spheres.forEach(sphere => {\n         const userData = sphere.userData;\n         \n         // Gentle floating motion (much slower)\n         sphere.position.y = userData.originalY + Math.sin(time * userData.speed + userData.phase) * 1;\n         sphere.rotation.x += 0.001;\n         sphere.rotation.y += 0.002;\n         \n         // Apply mouse interaction physics\n         if (userData.velocity.length() > 0) {\n           sphere.position.add(userData.velocity);\n           userData.velocity.multiplyScalar(0.95); // Damping\n           \n           // Return to original position slowly\n           const returnForce = userData.originalPosition.clone().sub(sphere.position).multiplyScalar(0.01);\n           userData.velocity.add(returnForce);\n         }\n       });\n       \n       // Animate shapes with physics\n       shapes.forEach(shape => {\n         const userData = shape.userData;\n         shape.rotation.x += userData.rotationSpeed.x;\n         shape.rotation.y += userData.rotationSpeed.y;\n         shape.rotation.z += userData.rotationSpeed.z;\n         \n         // Apply mouse interaction physics\n         if (userData.velocity.length() > 0) {\n           shape.position.add(userData.velocity);\n           userData.velocity.multiplyScalar(0.95); // Damping\n           \n           // Return to original position slowly\n           const returnForce = userData.originalPosition.clone().sub(shape.position).multiplyScalar(0.01);\n           userData.velocity.add(returnForce);\n         }\n       });\n       \n       // Very gentle camera movement (much slower)\n       camera.position.x = Math.sin(time * 0.02) * 3;\n       camera.position.y = Math.cos(time * 0.03) * 2;\n       camera.lookAt(0, 0, 0);\n      \n             renderer.render(scene, camera);\n       \n       // Debug log every 60 frames\n       if (Math.floor(time * 100) % 60 === 0) {\n         console.log('WebGL rendering... cube rotation:', testCube.rotation.x.toFixed(2));\n       }\n     };\n    \n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n         // Add proper lighting for 3D shading\n     const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n     scene.add(ambientLight);\n\n     const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n     directionalLight1.position.set(10, 10, 5);\n     scene.add(directionalLight1);\n\n     const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.3);\n     directionalLight2.position.set(-10, -10, -5);\n     scene.add(directionalLight2);\n\n     console.log('Starting WebGL animation...');\n     animate();\n    \n         // Cleanup function\n     return () => {\n       console.log('Cleaning up WebGL...');\n       sceneRef.current = null;\n       window.removeEventListener('resize', handleResize);\n       \n       if (animationId) {\n         cancelAnimationFrame(animationId);\n       }\n       \n       // Clean up Three.js objects\n       scene.traverse((object) => {\n         if (object.geometry) {\n           object.geometry.dispose();\n         }\n         if (object.material) {\n           if (Array.isArray(object.material)) {\n             object.material.forEach(material => material.dispose());\n           } else {\n             object.material.dispose();\n           }\n         }\n       });\n       \n       renderer.dispose();\n       \n       // Remove canvas from DOM\n       if (currentMount && currentMount.contains(renderer.domElement)) {\n         currentMount.removeChild(renderer.domElement);\n       }\n     };\n  }, []);\n\n      return (\n    <div \n      ref={mountRef} \n      style={{ \n        position: 'fixed', \n        top: 0, \n        left: 0, \n        width: '100vw', \n        height: '100vh', \n        zIndex: 1,\n        pointerEvents: 'none'\n      }} \n    />\n  );\n};\n\nexport default WebGLBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}