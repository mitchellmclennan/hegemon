{"ast":null,"code":"var _jsxFileName = \"/Users/wavestar/Hegemon/src/WebGLBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebGLBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current || sceneRef.current) return;\n    console.log('Initializing WebGL...');\n\n    // Store mount reference\n    const currentMount = mountRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n\n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // WHITE background\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0';\n    renderer.domElement.style.left = '0';\n    renderer.domElement.style.width = '100vw';\n    renderer.domElement.style.height = '100vh';\n    renderer.domElement.style.zIndex = '1';\n    currentMount.appendChild(renderer.domElement);\n    console.log('Canvas added to DOM:', currentMount.contains(renderer.domElement));\n    console.log('Canvas element:', renderer.domElement);\n    console.log('Canvas size:', window.innerWidth, 'x', window.innerHeight);\n\n    // Store scene reference to prevent double initialization\n    sceneRef.current = scene;\n\n    // Create a HUGE test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(10, 10, 10);\n    const testMaterial = new THREE.MeshPhongMaterial({\n      color: 0x333333,\n      shininess: 30,\n      specular: 0x222222\n    });\n    const testCube = new THREE.Mesh(testGeometry, testMaterial);\n    testCube.position.set(0, 0, 0);\n    scene.add(testCube);\n\n    // Create floating spheres (data nodes) - BIGGER and CLOSER\n    const spheres = [];\n    for (let i = 0; i < 10; i++) {\n      const geometry = new THREE.SphereGeometry(3, 32, 32); // Higher resolution for smoothness\n      const material = new THREE.MeshPhongMaterial({\n        color: 0x404040,\n        shininess: 60,\n        specular: 0x333333\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set((Math.random() - 0.5) * 30, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 15);\n      sphere.userData = {\n        originalY: sphere.position.y,\n        speed: 0.5 + Math.random() * 1.0,\n        phase: Math.random() * Math.PI * 2\n      };\n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n\n    // Create solid geometric shapes (not wireframe for better 3D effect)\n    const shapes = [];\n    const geometries = [new THREE.OctahedronGeometry(1.5, 1),\n    // Higher detail\n    new THREE.TetrahedronGeometry(2, 1), new THREE.IcosahedronGeometry(1.2, 1)];\n    for (let i = 0; i < 15; i++) {\n      const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshPhongMaterial({\n        color: 0x505050,\n        shininess: 40,\n        specular: 0x222222,\n        wireframe: false // Solid shapes for better 3D appearance\n      });\n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set((Math.random() - 0.5) * 40, (Math.random() - 0.5) * 25, (Math.random() - 0.5) * 25);\n      shape.userData = {\n        rotationSpeed: new THREE.Vector3((Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02)\n      };\n      shapes.push(shape);\n      scene.add(shape);\n    }\n\n    // Position camera MUCH closer\n    camera.position.set(0, 0, 30);\n    camera.lookAt(0, 0, 0);\n\n    // Animation\n    let animationId;\n    let time = 0;\n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n\n      // Rotate test cube - SLOWER\n      const cubeSpeed = testCube.userData.clickTime && time - testCube.userData.clickTime < 2 ? 0.05 : 0.003;\n      testCube.rotation.x += cubeSpeed;\n      testCube.rotation.y += cubeSpeed;\n\n      // Animate spheres - SLOWER\n      spheres.forEach(sphere => {\n        const userData = sphere.userData;\n        const floatSpeed = userData.speed * 0.3; // Much slower floating\n        sphere.position.y = userData.originalY + Math.sin(time * floatSpeed + userData.phase) * 2;\n        const rotSpeed = userData.clickTime && time - userData.clickTime < 2 ? 0.02 : 0.002;\n        sphere.rotation.x += rotSpeed;\n        sphere.rotation.y += rotSpeed * 1.3;\n      });\n\n      // Animate shapes\n      shapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n      });\n\n      // Gentle camera movement\n      camera.position.x = Math.sin(time * 0.1) * 10;\n      camera.position.y = Math.cos(time * 0.1) * 5;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n\n      // Debug log every 60 frames\n      if (Math.floor(time * 100) % 60 === 0) {\n        console.log('WebGL rendering... cube rotation:', testCube.rotation.x.toFixed(2));\n      }\n    };\n\n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Add proper lighting for 3D shading\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight1.position.set(10, 10, 5);\n    scene.add(directionalLight1);\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.3);\n    directionalLight2.position.set(-10, -10, -5);\n    scene.add(directionalLight2);\n\n    // Mouse interaction setup\n    const mouse = new THREE.Vector2();\n    const raycaster = new THREE.Raycaster();\n    let hoveredObject = null;\n    const allInteractiveObjects = [...spheres, ...shapes, testCube];\n\n    // Store original materials for reset\n    allInteractiveObjects.forEach(obj => {\n      obj.userData.originalMaterial = obj.material.clone();\n      obj.userData.originalScale = obj.scale.clone();\n    });\n    const onMouseMove = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(allInteractiveObjects);\n\n      // Reset previous hovered object\n      if (hoveredObject) {\n        hoveredObject.material = hoveredObject.userData.originalMaterial.clone();\n        hoveredObject.scale.copy(hoveredObject.userData.originalScale);\n        hoveredObject = null;\n      }\n\n      // Highlight new hovered object\n      if (intersects.length > 0) {\n        hoveredObject = intersects[0].object;\n        hoveredObject.material = new THREE.MeshPhongMaterial({\n          color: 0x666666,\n          shininess: 100,\n          specular: 0x888888,\n          emissive: 0x111111\n        });\n        hoveredObject.scale.multiplyScalar(1.1);\n        currentMount.style.cursor = 'pointer';\n      } else {\n        currentMount.style.cursor = 'default';\n      }\n    };\n    const onClick = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(allInteractiveObjects);\n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object;\n        // Add click animation - spin faster temporarily\n        clickedObject.userData.clickTime = time;\n        console.log('Clicked on 3D object!', clickedObject.geometry.type);\n      }\n    };\n    currentMount.addEventListener('mousemove', onMouseMove);\n    currentMount.addEventListener('click', onClick);\n    console.log('Starting WebGL animation...');\n    animate();\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up WebGL...');\n      sceneRef.current = null;\n      window.removeEventListener('resize', handleResize);\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n\n      // Clean up Three.js objects\n      scene.traverse(object => {\n        if (object.geometry) {\n          object.geometry.dispose();\n        }\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n      renderer.dispose();\n\n      // Remove canvas from DOM\n      if (currentMount && currentMount.contains(renderer.domElement)) {\n        currentMount.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      zIndex: 1,\n      pointerEvents: 'auto',\n      cursor: 'pointer'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s(WebGLBackground, \"fTngvglZ51/ZfcBvyjlXBMMFK9c=\");\n_c = WebGLBackground;\nexport default WebGLBackground;\nvar _c;\n$RefreshReg$(_c, \"WebGLBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","WebGLBackground","_s","mountRef","sceneRef","current","console","log","currentMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","setClearColor","domElement","style","position","top","left","width","height","zIndex","appendChild","contains","testGeometry","BoxGeometry","testMaterial","MeshPhongMaterial","color","shininess","specular","testCube","Mesh","set","add","spheres","i","geometry","SphereGeometry","material","sphere","Math","random","userData","originalY","y","speed","phase","PI","push","shapes","geometries","OctahedronGeometry","TetrahedronGeometry","IcosahedronGeometry","floor","length","wireframe","shape","rotationSpeed","Vector3","lookAt","animationId","time","animate","requestAnimationFrame","cubeSpeed","clickTime","rotation","x","forEach","floatSpeed","sin","rotSpeed","z","cos","render","toFixed","handleResize","aspect","updateProjectionMatrix","addEventListener","ambientLight","AmbientLight","directionalLight1","DirectionalLight","directionalLight2","mouse","Vector2","raycaster","Raycaster","hoveredObject","allInteractiveObjects","obj","originalMaterial","clone","originalScale","scale","onMouseMove","event","clientX","clientY","setFromCamera","intersects","intersectObjects","copy","object","emissive","multiplyScalar","cursor","onClick","clickedObject","type","removeEventListener","cancelAnimationFrame","traverse","dispose","Array","isArray","removeChild","ref","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wavestar/Hegemon/src/WebGLBackground.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst WebGLBackground = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n\n  useEffect(() => {\n    if (!mountRef.current || sceneRef.current) return;\n    \n    console.log('Initializing WebGL...');\n    \n    // Store mount reference\n    const currentMount = mountRef.current;\n    \n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    \n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // WHITE background\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0';\n    renderer.domElement.style.left = '0';\n    renderer.domElement.style.width = '100vw';\n    renderer.domElement.style.height = '100vh';\n    renderer.domElement.style.zIndex = '1';\n    currentMount.appendChild(renderer.domElement);\n    \n    console.log('Canvas added to DOM:', currentMount.contains(renderer.domElement));\n    console.log('Canvas element:', renderer.domElement);\n    console.log('Canvas size:', window.innerWidth, 'x', window.innerHeight);\n    \n    // Store scene reference to prevent double initialization\n    sceneRef.current = scene;\n    \n    // Create a HUGE test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(10, 10, 10);\n    const testMaterial = new THREE.MeshPhongMaterial({ \n      color: 0x333333,\n      shininess: 30,\n      specular: 0x222222\n    });\n    const testCube = new THREE.Mesh(testGeometry, testMaterial);\n    testCube.position.set(0, 0, 0);\n    scene.add(testCube);\n    \n              // Create floating spheres (data nodes) - BIGGER and CLOSER\n     const spheres = [];\n     for (let i = 0; i < 10; i++) {\n       const geometry = new THREE.SphereGeometry(3, 32, 32); // Higher resolution for smoothness\n       const material = new THREE.MeshPhongMaterial({\n         color: 0x404040,\n         shininess: 60,\n         specular: 0x333333\n       });\n       \n       const sphere = new THREE.Mesh(geometry, material);\n       sphere.position.set(\n         (Math.random() - 0.5) * 30,\n         (Math.random() - 0.5) * 20,\n         (Math.random() - 0.5) * 15\n       );\n      \n      sphere.userData = {\n        originalY: sphere.position.y,\n        speed: 0.5 + Math.random() * 1.0,\n        phase: Math.random() * Math.PI * 2\n      };\n      \n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n    \n         // Create solid geometric shapes (not wireframe for better 3D effect)\n     const shapes = [];\n     const geometries = [\n       new THREE.OctahedronGeometry(1.5, 1), // Higher detail\n       new THREE.TetrahedronGeometry(2, 1),\n       new THREE.IcosahedronGeometry(1.2, 1)\n     ];\n     \n     for (let i = 0; i < 15; i++) {\n       const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n       const material = new THREE.MeshPhongMaterial({\n         color: 0x505050,\n         shininess: 40,\n         specular: 0x222222,\n         wireframe: false // Solid shapes for better 3D appearance\n       });\n      \n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set(\n        (Math.random() - 0.5) * 40,\n        (Math.random() - 0.5) * 25,\n        (Math.random() - 0.5) * 25\n      );\n      \n      shape.userData = {\n        rotationSpeed: new THREE.Vector3(\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02\n        )\n      };\n      \n      shapes.push(shape);\n      scene.add(shape);\n    }\n    \n         // Position camera MUCH closer\n     camera.position.set(0, 0, 30);\n     camera.lookAt(0, 0, 0);\n    \n    // Animation\n    let animationId;\n    let time = 0;\n    \n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n      \n             // Rotate test cube - SLOWER\n       const cubeSpeed = testCube.userData.clickTime && (time - testCube.userData.clickTime) < 2 ? 0.05 : 0.003;\n       testCube.rotation.x += cubeSpeed;\n       testCube.rotation.y += cubeSpeed;\n      \n             // Animate spheres - SLOWER\n       spheres.forEach(sphere => {\n         const userData = sphere.userData;\n         const floatSpeed = userData.speed * 0.3; // Much slower floating\n         sphere.position.y = userData.originalY + Math.sin(time * floatSpeed + userData.phase) * 2;\n         \n         const rotSpeed = userData.clickTime && (time - userData.clickTime) < 2 ? 0.02 : 0.002;\n         sphere.rotation.x += rotSpeed;\n         sphere.rotation.y += rotSpeed * 1.3;\n       });\n      \n      // Animate shapes\n      shapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n      });\n      \n             // Gentle camera movement\n       camera.position.x = Math.sin(time * 0.1) * 10;\n       camera.position.y = Math.cos(time * 0.1) * 5;\n       camera.lookAt(0, 0, 0);\n      \n             renderer.render(scene, camera);\n       \n       // Debug log every 60 frames\n       if (Math.floor(time * 100) % 60 === 0) {\n         console.log('WebGL rendering... cube rotation:', testCube.rotation.x.toFixed(2));\n       }\n     };\n    \n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n         // Add proper lighting for 3D shading\n     const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n     scene.add(ambientLight);\n\n     const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n     directionalLight1.position.set(10, 10, 5);\n     scene.add(directionalLight1);\n\n     const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.3);\n     directionalLight2.position.set(-10, -10, -5);\n     scene.add(directionalLight2);\n\n     // Mouse interaction setup\n     const mouse = new THREE.Vector2();\n     const raycaster = new THREE.Raycaster();\n     let hoveredObject = null;\n     const allInteractiveObjects = [...spheres, ...shapes, testCube];\n\n     // Store original materials for reset\n     allInteractiveObjects.forEach(obj => {\n       obj.userData.originalMaterial = obj.material.clone();\n       obj.userData.originalScale = obj.scale.clone();\n     });\n\n     const onMouseMove = (event) => {\n       mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n       mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n       raycaster.setFromCamera(mouse, camera);\n       const intersects = raycaster.intersectObjects(allInteractiveObjects);\n\n       // Reset previous hovered object\n       if (hoveredObject) {\n         hoveredObject.material = hoveredObject.userData.originalMaterial.clone();\n         hoveredObject.scale.copy(hoveredObject.userData.originalScale);\n         hoveredObject = null;\n       }\n\n       // Highlight new hovered object\n       if (intersects.length > 0) {\n         hoveredObject = intersects[0].object;\n         hoveredObject.material = new THREE.MeshPhongMaterial({\n           color: 0x666666,\n           shininess: 100,\n           specular: 0x888888,\n           emissive: 0x111111\n         });\n         hoveredObject.scale.multiplyScalar(1.1);\n         currentMount.style.cursor = 'pointer';\n       } else {\n         currentMount.style.cursor = 'default';\n       }\n     };\n\n     const onClick = (event) => {\n       mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n       mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n       raycaster.setFromCamera(mouse, camera);\n       const intersects = raycaster.intersectObjects(allInteractiveObjects);\n\n       if (intersects.length > 0) {\n         const clickedObject = intersects[0].object;\n         // Add click animation - spin faster temporarily\n         clickedObject.userData.clickTime = time;\n         console.log('Clicked on 3D object!', clickedObject.geometry.type);\n       }\n     };\n\n     currentMount.addEventListener('mousemove', onMouseMove);\n     currentMount.addEventListener('click', onClick);\n\n     console.log('Starting WebGL animation...');\n     animate();\n    \n         // Cleanup function\n     return () => {\n       console.log('Cleaning up WebGL...');\n       sceneRef.current = null;\n       window.removeEventListener('resize', handleResize);\n       \n       if (animationId) {\n         cancelAnimationFrame(animationId);\n       }\n       \n       // Clean up Three.js objects\n       scene.traverse((object) => {\n         if (object.geometry) {\n           object.geometry.dispose();\n         }\n         if (object.material) {\n           if (Array.isArray(object.material)) {\n             object.material.forEach(material => material.dispose());\n           } else {\n             object.material.dispose();\n           }\n         }\n       });\n       \n       renderer.dispose();\n       \n       // Remove canvas from DOM\n       if (currentMount && currentMount.contains(renderer.domElement)) {\n         currentMount.removeChild(renderer.domElement);\n       }\n     };\n  }, []);\n\n      return (\n    <div \n      ref={mountRef} \n      style={{ \n        position: 'fixed', \n        top: 0, \n        left: 0, \n        width: '100vw', \n        height: '100vh', \n        zIndex: 1,\n        pointerEvents: 'auto',\n        cursor: 'pointer'\n      }} \n    />\n  );\n};\n\nexport default WebGLBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}