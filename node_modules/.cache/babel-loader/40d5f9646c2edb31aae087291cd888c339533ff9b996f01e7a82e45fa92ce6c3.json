{"ast":null,"code":"var _jsxFileName = \"/Users/wavestar/Hegemon/src/WebGLBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebGLBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const frameRef = useRef(null);\n  useEffect(() => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.fog = new THREE.Fog(0x0a0a0a, 50, 200);\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 50;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0x000000, 0);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Store refs\n    sceneRef.current = scene;\n    rendererRef.current = renderer;\n\n    // Data nodes (representing data infrastructure)\n    const nodeGeometry = new THREE.SphereGeometry(0.3, 16, 16);\n    const nodes = [];\n    const nodeCount = 80;\n    for (let i = 0; i < nodeCount; i++) {\n      const nodeMaterial = new THREE.MeshPhongMaterial({\n        color: new THREE.Color().setHSL(0.15 + Math.random() * 0.1, 0.8, 0.6),\n        transparent: true,\n        opacity: 0.8,\n        emissive: new THREE.Color().setHSL(0.15 + Math.random() * 0.1, 0.4, 0.1)\n      });\n      const node = new THREE.Mesh(nodeGeometry, nodeMaterial);\n      node.position.set((Math.random() - 0.5) * 120, (Math.random() - 0.5) * 80, (Math.random() - 0.5) * 60);\n      node.userData = {\n        originalPosition: node.position.clone(),\n        phase: Math.random() * Math.PI * 2,\n        speed: 0.5 + Math.random() * 1.5\n      };\n      nodes.push(node);\n      scene.add(node);\n    }\n\n    // Connection lines (data flow)\n    const connectionMaterial = new THREE.LineBasicMaterial({\n      color: 0x00ffaa,\n      transparent: true,\n      opacity: 0.3\n    });\n    const connections = [];\n    for (let i = 0; i < nodeCount / 4; i++) {\n      const node1 = nodes[Math.floor(Math.random() * nodes.length)];\n      const node2 = nodes[Math.floor(Math.random() * nodes.length)];\n      if (node1 !== node2 && node1.position.distanceTo(node2.position) < 30) {\n        const geometry = new THREE.BufferGeometry().setFromPoints([node1.position, node2.position]);\n        const line = new THREE.Line(geometry, connectionMaterial);\n        connections.push({\n          line,\n          node1,\n          node2\n        });\n        scene.add(line);\n      }\n    }\n\n    // Floating geometric shapes (microservices)\n    const geometries = [new THREE.OctahedronGeometry(1), new THREE.TetrahedronGeometry(1.2), new THREE.IcosahedronGeometry(0.8)];\n    const floatingShapes = [];\n    for (let i = 0; i < 25; i++) {\n      const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshPhongMaterial({\n        color: new THREE.Color().setHSL(0.5 + Math.random() * 0.3, 0.7, 0.5),\n        transparent: true,\n        opacity: 0.6,\n        wireframe: Math.random() > 0.5\n      });\n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set((Math.random() - 0.5) * 100, (Math.random() - 0.5) * 60, (Math.random() - 0.5) * 40);\n      shape.userData = {\n        rotationSpeed: new THREE.Vector3((Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02),\n        floatSpeed: 0.3 + Math.random() * 0.7,\n        floatRange: 5 + Math.random() * 10\n      };\n      floatingShapes.push(shape);\n      scene.add(shape);\n    }\n\n    // Particle system (data streams)\n    const particleCount = 200;\n    const particleGeometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n    for (let i = 0; i < particleCount * 3; i += 3) {\n      positions[i] = (Math.random() - 0.5) * 200;\n      positions[i + 1] = (Math.random() - 0.5) * 100;\n      positions[i + 2] = (Math.random() - 0.5) * 100;\n      velocities[i] = (Math.random() - 0.5) * 0.5;\n      velocities[i + 1] = (Math.random() - 0.5) * 0.3;\n      velocities[i + 2] = (Math.random() - 0.5) * 0.5;\n    }\n    particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    const particleMaterial = new THREE.PointsMaterial({\n      color: 0x00aaff,\n      size: 0.5,\n      transparent: true,\n      opacity: 0.7\n    });\n    const particles = new THREE.Points(particleGeometry, particleMaterial);\n    scene.add(particles);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.3);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 5);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    const pointLight = new THREE.PointLight(0x00ffaa, 0.5, 50);\n    pointLight.position.set(-20, -20, 20);\n    scene.add(pointLight);\n\n    // Animation\n    let time = 0;\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n      time += 0.01;\n\n      // Animate nodes\n      nodes.forEach((node, index) => {\n        const userData = node.userData;\n        node.position.y = userData.originalPosition.y + Math.sin(time * userData.speed + userData.phase) * 3;\n        node.rotation.x += 0.01;\n        node.rotation.y += 0.015;\n\n        // Pulse effect\n        const scale = 1 + Math.sin(time * 2 + userData.phase) * 0.2;\n        node.scale.setScalar(scale);\n      });\n\n      // Update connections\n      connections.forEach(({\n        line,\n        node1,\n        node2\n      }) => {\n        const geometry = line.geometry;\n        const positions = geometry.attributes.position.array;\n        positions[0] = node1.position.x;\n        positions[1] = node1.position.y;\n        positions[2] = node1.position.z;\n        positions[3] = node2.position.x;\n        positions[4] = node2.position.y;\n        positions[5] = node2.position.z;\n        geometry.attributes.position.needsUpdate = true;\n      });\n\n      // Animate floating shapes\n      floatingShapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n        shape.position.y += Math.sin(time * userData.floatSpeed) * 0.02;\n      });\n\n      // Animate particles\n      const positions = particles.geometry.attributes.position.array;\n      for (let i = 0; i < particleCount * 3; i += 3) {\n        positions[i] += velocities[i];\n        positions[i + 1] += velocities[i + 1];\n        positions[i + 2] += velocities[i + 2];\n\n        // Reset particles that go too far\n        if (Math.abs(positions[i]) > 100 || Math.abs(positions[i + 1]) > 50 || Math.abs(positions[i + 2]) > 50) {\n          positions[i] = (Math.random() - 0.5) * 200;\n          positions[i + 1] = (Math.random() - 0.5) * 100;\n          positions[i + 2] = (Math.random() - 0.5) * 100;\n        }\n      }\n      particles.geometry.attributes.position.needsUpdate = true;\n\n      // Camera movement\n      camera.position.x = Math.sin(time * 0.1) * 10;\n      camera.position.y = Math.cos(time * 0.15) * 5;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = window.innerWidth;\n      const newHeight = window.innerHeight;\n      camera.aspect = newWidth / newHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(newWidth, newHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      const mount = mountRef.current;\n      window.removeEventListener('resize', handleResize);\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      if (mount && renderer.domElement) {\n        mount.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: -1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 10\n  }, this);\n};\n_s(WebGLBackground, \"tbVjb/zIpF44wsuWiSbhR++JXpo=\");\n_c = WebGLBackground;\nexport default WebGLBackground;\nvar _c;\n$RefreshReg$(_c, \"WebGLBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","WebGLBackground","_s","mountRef","sceneRef","rendererRef","frameRef","width","window","innerWidth","height","innerHeight","scene","Scene","fog","Fog","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","current","appendChild","domElement","nodeGeometry","SphereGeometry","nodes","nodeCount","i","nodeMaterial","MeshPhongMaterial","color","Color","setHSL","Math","random","transparent","opacity","emissive","node","Mesh","set","userData","originalPosition","clone","phase","PI","speed","push","add","connectionMaterial","LineBasicMaterial","connections","node1","floor","length","node2","distanceTo","geometry","BufferGeometry","setFromPoints","line","Line","geometries","OctahedronGeometry","TetrahedronGeometry","IcosahedronGeometry","floatingShapes","material","wireframe","shape","rotationSpeed","Vector3","floatSpeed","floatRange","particleCount","particleGeometry","positions","Float32Array","velocities","setAttribute","BufferAttribute","particleMaterial","PointsMaterial","size","particles","Points","ambientLight","AmbientLight","directionalLight","DirectionalLight","castShadow","pointLight","PointLight","time","animate","requestAnimationFrame","forEach","index","y","sin","rotation","x","scale","setScalar","attributes","array","needsUpdate","abs","cos","lookAt","render","handleResize","newWidth","newHeight","aspect","updateProjectionMatrix","addEventListener","mount","removeEventListener","cancelAnimationFrame","removeChild","dispose","ref","style","top","left","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wavestar/Hegemon/src/WebGLBackground.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst WebGLBackground = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const frameRef = useRef(null);\n\n  useEffect(() => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.fog = new THREE.Fog(0x0a0a0a, 50, 200);\n    \n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 50;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0x000000, 0);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Store refs\n    sceneRef.current = scene;\n    rendererRef.current = renderer;\n\n    // Data nodes (representing data infrastructure)\n    const nodeGeometry = new THREE.SphereGeometry(0.3, 16, 16);\n    const nodes = [];\n    const nodeCount = 80;\n\n    for (let i = 0; i < nodeCount; i++) {\n      const nodeMaterial = new THREE.MeshPhongMaterial({\n        color: new THREE.Color().setHSL(0.15 + Math.random() * 0.1, 0.8, 0.6),\n        transparent: true,\n        opacity: 0.8,\n        emissive: new THREE.Color().setHSL(0.15 + Math.random() * 0.1, 0.4, 0.1)\n      });\n\n      const node = new THREE.Mesh(nodeGeometry, nodeMaterial);\n      node.position.set(\n        (Math.random() - 0.5) * 120,\n        (Math.random() - 0.5) * 80,\n        (Math.random() - 0.5) * 60\n      );\n      \n      node.userData = {\n        originalPosition: node.position.clone(),\n        phase: Math.random() * Math.PI * 2,\n        speed: 0.5 + Math.random() * 1.5\n      };\n\n      nodes.push(node);\n      scene.add(node);\n    }\n\n    // Connection lines (data flow)\n    const connectionMaterial = new THREE.LineBasicMaterial({\n      color: 0x00ffaa,\n      transparent: true,\n      opacity: 0.3\n    });\n\n    const connections = [];\n    for (let i = 0; i < nodeCount / 4; i++) {\n      const node1 = nodes[Math.floor(Math.random() * nodes.length)];\n      const node2 = nodes[Math.floor(Math.random() * nodes.length)];\n      \n      if (node1 !== node2 && node1.position.distanceTo(node2.position) < 30) {\n        const geometry = new THREE.BufferGeometry().setFromPoints([\n          node1.position,\n          node2.position\n        ]);\n        const line = new THREE.Line(geometry, connectionMaterial);\n        connections.push({ line, node1, node2 });\n        scene.add(line);\n      }\n    }\n\n    // Floating geometric shapes (microservices)\n    const geometries = [\n      new THREE.OctahedronGeometry(1),\n      new THREE.TetrahedronGeometry(1.2),\n      new THREE.IcosahedronGeometry(0.8)\n    ];\n\n    const floatingShapes = [];\n    for (let i = 0; i < 25; i++) {\n      const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshPhongMaterial({\n        color: new THREE.Color().setHSL(0.5 + Math.random() * 0.3, 0.7, 0.5),\n        transparent: true,\n        opacity: 0.6,\n        wireframe: Math.random() > 0.5\n      });\n\n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set(\n        (Math.random() - 0.5) * 100,\n        (Math.random() - 0.5) * 60,\n        (Math.random() - 0.5) * 40\n      );\n      \n      shape.userData = {\n        rotationSpeed: new THREE.Vector3(\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02\n        ),\n        floatSpeed: 0.3 + Math.random() * 0.7,\n        floatRange: 5 + Math.random() * 10\n      };\n\n      floatingShapes.push(shape);\n      scene.add(shape);\n    }\n\n    // Particle system (data streams)\n    const particleCount = 200;\n    const particleGeometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount * 3; i += 3) {\n      positions[i] = (Math.random() - 0.5) * 200;\n      positions[i + 1] = (Math.random() - 0.5) * 100;\n      positions[i + 2] = (Math.random() - 0.5) * 100;\n      \n      velocities[i] = (Math.random() - 0.5) * 0.5;\n      velocities[i + 1] = (Math.random() - 0.5) * 0.3;\n      velocities[i + 2] = (Math.random() - 0.5) * 0.5;\n    }\n\n    particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    \n    const particleMaterial = new THREE.PointsMaterial({\n      color: 0x00aaff,\n      size: 0.5,\n      transparent: true,\n      opacity: 0.7\n    });\n\n    const particles = new THREE.Points(particleGeometry, particleMaterial);\n    scene.add(particles);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.3);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 5);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    const pointLight = new THREE.PointLight(0x00ffaa, 0.5, 50);\n    pointLight.position.set(-20, -20, 20);\n    scene.add(pointLight);\n\n    // Animation\n    let time = 0;\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n      time += 0.01;\n\n      // Animate nodes\n      nodes.forEach((node, index) => {\n        const userData = node.userData;\n        node.position.y = userData.originalPosition.y + Math.sin(time * userData.speed + userData.phase) * 3;\n        node.rotation.x += 0.01;\n        node.rotation.y += 0.015;\n        \n        // Pulse effect\n        const scale = 1 + Math.sin(time * 2 + userData.phase) * 0.2;\n        node.scale.setScalar(scale);\n      });\n\n      // Update connections\n      connections.forEach(({ line, node1, node2 }) => {\n        const geometry = line.geometry;\n        const positions = geometry.attributes.position.array;\n        positions[0] = node1.position.x;\n        positions[1] = node1.position.y;\n        positions[2] = node1.position.z;\n        positions[3] = node2.position.x;\n        positions[4] = node2.position.y;\n        positions[5] = node2.position.z;\n        geometry.attributes.position.needsUpdate = true;\n      });\n\n      // Animate floating shapes\n      floatingShapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n        \n        shape.position.y += Math.sin(time * userData.floatSpeed) * 0.02;\n      });\n\n      // Animate particles\n      const positions = particles.geometry.attributes.position.array;\n      for (let i = 0; i < particleCount * 3; i += 3) {\n        positions[i] += velocities[i];\n        positions[i + 1] += velocities[i + 1];\n        positions[i + 2] += velocities[i + 2];\n\n        // Reset particles that go too far\n        if (Math.abs(positions[i]) > 100 || Math.abs(positions[i + 1]) > 50 || Math.abs(positions[i + 2]) > 50) {\n          positions[i] = (Math.random() - 0.5) * 200;\n          positions[i + 1] = (Math.random() - 0.5) * 100;\n          positions[i + 2] = (Math.random() - 0.5) * 100;\n        }\n      }\n      particles.geometry.attributes.position.needsUpdate = true;\n\n      // Camera movement\n      camera.position.x = Math.sin(time * 0.1) * 10;\n      camera.position.y = Math.cos(time * 0.15) * 5;\n      camera.lookAt(0, 0, 0);\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = window.innerWidth;\n      const newHeight = window.innerHeight;\n      \n      camera.aspect = newWidth / newHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(newWidth, newHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      const mount = mountRef.current;\n      window.removeEventListener('resize', handleResize);\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      if (mount && renderer.domElement) {\n        mount.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n\n  return <div ref={mountRef} style={{ position: 'absolute', top: 0, left: 0, zIndex: -1 }} />;\n};\n\nexport default WebGLBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}