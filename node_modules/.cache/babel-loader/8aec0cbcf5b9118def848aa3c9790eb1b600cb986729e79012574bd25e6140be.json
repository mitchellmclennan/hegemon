{"ast":null,"code":"var _jsxFileName = \"/Users/wavestar/Hegemon/src/WebGLBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebGLBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current || sceneRef.current) return;\n    console.log('Initializing WebGL...');\n\n    // Store mount reference\n    const currentMount = mountRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n\n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // WHITE background\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0';\n    renderer.domElement.style.left = '0';\n    renderer.domElement.style.width = '100vw';\n    renderer.domElement.style.height = '100vh';\n    renderer.domElement.style.zIndex = '1';\n    currentMount.appendChild(renderer.domElement);\n    console.log('Canvas added to DOM:', currentMount.contains(renderer.domElement));\n    console.log('Canvas element:', renderer.domElement);\n    console.log('Canvas size:', window.innerWidth, 'x', window.innerHeight);\n\n    // Store scene reference to prevent double initialization\n    sceneRef.current = scene;\n\n    // Create a HUGE test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(10, 10, 10);\n    const testMaterial = new THREE.MeshBasicMaterial({\n      color: 0xff0000,\n      wireframe: false\n    });\n    const testCube = new THREE.Mesh(testGeometry, testMaterial);\n    testCube.position.set(0, 0, 0);\n    scene.add(testCube);\n\n    // Create floating spheres (data nodes) - BIGGER and CLOSER\n    const spheres = [];\n    for (let i = 0; i < 10; i++) {\n      const geometry = new THREE.SphereGeometry(3, 16, 16);\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.6 + Math.random() * 0.2, 1.0, 0.3),\n        transparent: false,\n        opacity: 1.0\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set((Math.random() - 0.5) * 30, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 15);\n      sphere.userData = {\n        originalY: sphere.position.y,\n        speed: 0.5 + Math.random() * 1.0,\n        phase: Math.random() * Math.PI * 2\n      };\n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n\n    // Create wireframe geometric shapes\n    const shapes = [];\n    const geometries = [new THREE.OctahedronGeometry(1.5), new THREE.TetrahedronGeometry(2), new THREE.IcosahedronGeometry(1.2)];\n    for (let i = 0; i < 15; i++) {\n      const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.1 + Math.random() * 0.8, 0.8, 0.4),\n        wireframe: true,\n        transparent: true,\n        opacity: 0.8\n      });\n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set((Math.random() - 0.5) * 40, (Math.random() - 0.5) * 25, (Math.random() - 0.5) * 25);\n      shape.userData = {\n        rotationSpeed: new THREE.Vector3((Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02)\n      };\n      shapes.push(shape);\n      scene.add(shape);\n    }\n\n    // Position camera MUCH closer\n    camera.position.set(0, 0, 30);\n    camera.lookAt(0, 0, 0);\n\n    // Animation\n    let animationId;\n    let time = 0;\n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n\n      // Rotate test cube\n      testCube.rotation.x += 0.01;\n      testCube.rotation.y += 0.01;\n\n      // Animate spheres\n      spheres.forEach(sphere => {\n        const userData = sphere.userData;\n        sphere.position.y = userData.originalY + Math.sin(time * userData.speed + userData.phase) * 3;\n        sphere.rotation.x += 0.005;\n        sphere.rotation.y += 0.008;\n      });\n\n      // Animate shapes\n      shapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n      });\n\n      // Gentle camera movement\n      camera.position.x = Math.sin(time * 0.1) * 10;\n      camera.position.y = Math.cos(time * 0.1) * 5;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n\n      // Debug log every 60 frames\n      if (Math.floor(time * 100) % 60 === 0) {\n        console.log('WebGL rendering... cube rotation:', testCube.rotation.x.toFixed(2));\n      }\n    };\n\n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n    console.log('Starting WebGL animation...');\n    animate();\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up WebGL...');\n      sceneRef.current = null;\n      window.removeEventListener('resize', handleResize);\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n\n      // Clean up Three.js objects\n      scene.traverse(object => {\n        if (object.geometry) {\n          object.geometry.dispose();\n        }\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n      renderer.dispose();\n\n      // Remove canvas from DOM\n      if (currentMount && currentMount.contains(renderer.domElement)) {\n        currentMount.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      zIndex: 1,\n      pointerEvents: 'none',\n      backgroundColor: 'black'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(WebGLBackground, \"fTngvglZ51/ZfcBvyjlXBMMFK9c=\");\n_c = WebGLBackground;\nexport default WebGLBackground;\nvar _c;\n$RefreshReg$(_c, \"WebGLBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","WebGLBackground","_s","mountRef","sceneRef","current","console","log","currentMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","setClearColor","domElement","style","position","top","left","width","height","zIndex","appendChild","contains","testGeometry","BoxGeometry","testMaterial","MeshBasicMaterial","color","wireframe","testCube","Mesh","set","add","spheres","i","geometry","SphereGeometry","material","Color","setHSL","Math","random","transparent","opacity","sphere","userData","originalY","y","speed","phase","PI","push","shapes","geometries","OctahedronGeometry","TetrahedronGeometry","IcosahedronGeometry","floor","length","shape","rotationSpeed","Vector3","lookAt","animationId","time","animate","requestAnimationFrame","rotation","x","forEach","sin","z","cos","render","toFixed","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","traverse","object","dispose","Array","isArray","removeChild","ref","pointerEvents","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wavestar/Hegemon/src/WebGLBackground.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst WebGLBackground = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n\n  useEffect(() => {\n    if (!mountRef.current || sceneRef.current) return;\n    \n    console.log('Initializing WebGL...');\n    \n    // Store mount reference\n    const currentMount = mountRef.current;\n    \n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    \n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // WHITE background\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0';\n    renderer.domElement.style.left = '0';\n    renderer.domElement.style.width = '100vw';\n    renderer.domElement.style.height = '100vh';\n    renderer.domElement.style.zIndex = '1';\n    currentMount.appendChild(renderer.domElement);\n    \n    console.log('Canvas added to DOM:', currentMount.contains(renderer.domElement));\n    console.log('Canvas element:', renderer.domElement);\n    console.log('Canvas size:', window.innerWidth, 'x', window.innerHeight);\n    \n    // Store scene reference to prevent double initialization\n    sceneRef.current = scene;\n    \n    // Create a HUGE test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(10, 10, 10);\n    const testMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: false });\n    const testCube = new THREE.Mesh(testGeometry, testMaterial);\n    testCube.position.set(0, 0, 0);\n    scene.add(testCube);\n    \n              // Create floating spheres (data nodes) - BIGGER and CLOSER\n     const spheres = [];\n     for (let i = 0; i < 10; i++) {\n       const geometry = new THREE.SphereGeometry(3, 16, 16);\n       const material = new THREE.MeshBasicMaterial({\n         color: new THREE.Color().setHSL(0.6 + Math.random() * 0.2, 1.0, 0.3),\n         transparent: false,\n         opacity: 1.0\n       });\n       \n       const sphere = new THREE.Mesh(geometry, material);\n       sphere.position.set(\n         (Math.random() - 0.5) * 30,\n         (Math.random() - 0.5) * 20,\n         (Math.random() - 0.5) * 15\n       );\n      \n      sphere.userData = {\n        originalY: sphere.position.y,\n        speed: 0.5 + Math.random() * 1.0,\n        phase: Math.random() * Math.PI * 2\n      };\n      \n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n    \n    // Create wireframe geometric shapes\n    const shapes = [];\n    const geometries = [\n      new THREE.OctahedronGeometry(1.5),\n      new THREE.TetrahedronGeometry(2),\n      new THREE.IcosahedronGeometry(1.2)\n    ];\n    \n         for (let i = 0; i < 15; i++) {\n       const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n       const material = new THREE.MeshBasicMaterial({\n         color: new THREE.Color().setHSL(0.1 + Math.random() * 0.8, 0.8, 0.4),\n         wireframe: true,\n         transparent: true,\n         opacity: 0.8\n       });\n      \n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set(\n        (Math.random() - 0.5) * 40,\n        (Math.random() - 0.5) * 25,\n        (Math.random() - 0.5) * 25\n      );\n      \n      shape.userData = {\n        rotationSpeed: new THREE.Vector3(\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02\n        )\n      };\n      \n      shapes.push(shape);\n      scene.add(shape);\n    }\n    \n         // Position camera MUCH closer\n     camera.position.set(0, 0, 30);\n     camera.lookAt(0, 0, 0);\n    \n    // Animation\n    let animationId;\n    let time = 0;\n    \n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n      \n      // Rotate test cube\n      testCube.rotation.x += 0.01;\n      testCube.rotation.y += 0.01;\n      \n      // Animate spheres\n      spheres.forEach(sphere => {\n        const userData = sphere.userData;\n        sphere.position.y = userData.originalY + Math.sin(time * userData.speed + userData.phase) * 3;\n        sphere.rotation.x += 0.005;\n        sphere.rotation.y += 0.008;\n      });\n      \n      // Animate shapes\n      shapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n      });\n      \n             // Gentle camera movement\n       camera.position.x = Math.sin(time * 0.1) * 10;\n       camera.position.y = Math.cos(time * 0.1) * 5;\n       camera.lookAt(0, 0, 0);\n      \n             renderer.render(scene, camera);\n       \n       // Debug log every 60 frames\n       if (Math.floor(time * 100) % 60 === 0) {\n         console.log('WebGL rendering... cube rotation:', testCube.rotation.x.toFixed(2));\n       }\n     };\n    \n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    console.log('Starting WebGL animation...');\n    animate();\n    \n         // Cleanup function\n     return () => {\n       console.log('Cleaning up WebGL...');\n       sceneRef.current = null;\n       window.removeEventListener('resize', handleResize);\n       \n       if (animationId) {\n         cancelAnimationFrame(animationId);\n       }\n       \n       // Clean up Three.js objects\n       scene.traverse((object) => {\n         if (object.geometry) {\n           object.geometry.dispose();\n         }\n         if (object.material) {\n           if (Array.isArray(object.material)) {\n             object.material.forEach(material => material.dispose());\n           } else {\n             object.material.dispose();\n           }\n         }\n       });\n       \n       renderer.dispose();\n       \n       // Remove canvas from DOM\n       if (currentMount && currentMount.contains(renderer.domElement)) {\n         currentMount.removeChild(renderer.domElement);\n       }\n     };\n  }, []);\n\n      return (\n    <div \n      ref={mountRef} \n      style={{ \n        position: 'fixed', \n        top: 0, \n        left: 0, \n        width: '100vw', \n        height: '100vh', \n        zIndex: 1,\n        pointerEvents: 'none',\n        backgroundColor: 'black'\n      }} \n    />\n  );\n};\n\nexport default WebGLBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}