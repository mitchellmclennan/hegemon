{"ast":null,"code":"var _jsxFileName = \"/Users/wavestar/Hegemon/src/WebGLBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebGLBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n    console.log('Initializing WebGL...');\n\n    // Store mount reference\n    const currentMount = mountRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n\n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xf0f8ff, 1);\n    currentMount.appendChild(renderer.domElement);\n\n    // Create a simple test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(2, 2, 2);\n    const testMaterial = new THREE.MeshBasicMaterial({\n      color: 0xff0000,\n      wireframe: true\n    });\n    const testCube = new THREE.Mesh(testGeometry, testMaterial);\n    scene.add(testCube);\n\n    // Create floating spheres (data nodes)\n    const spheres = [];\n    for (let i = 0; i < 30; i++) {\n      const geometry = new THREE.SphereGeometry(0.5, 16, 16);\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.6 + Math.random() * 0.2, 0.7, 0.8),\n        transparent: true,\n        opacity: 0.8\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set((Math.random() - 0.5) * 50, (Math.random() - 0.5) * 30, (Math.random() - 0.5) * 30);\n      sphere.userData = {\n        originalY: sphere.position.y,\n        speed: 0.5 + Math.random() * 1.0,\n        phase: Math.random() * Math.PI * 2\n      };\n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n\n    // Create wireframe geometric shapes\n    const shapes = [];\n    const geometries = [new THREE.OctahedronGeometry(1.5), new THREE.TetrahedronGeometry(2), new THREE.IcosahedronGeometry(1.2)];\n    for (let i = 0; i < 15; i++) {\n      const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.55 + Math.random() * 0.3, 0.6, 0.7),\n        wireframe: true,\n        transparent: true,\n        opacity: 0.6\n      });\n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set((Math.random() - 0.5) * 40, (Math.random() - 0.5) * 25, (Math.random() - 0.5) * 25);\n      shape.userData = {\n        rotationSpeed: new THREE.Vector3((Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02)\n      };\n      shapes.push(shape);\n      scene.add(shape);\n    }\n\n    // Position camera\n    camera.position.z = 25;\n    camera.position.y = 5;\n\n    // Animation\n    let animationId;\n    let time = 0;\n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n\n      // Rotate test cube\n      testCube.rotation.x += 0.01;\n      testCube.rotation.y += 0.01;\n\n      // Animate spheres\n      spheres.forEach(sphere => {\n        const userData = sphere.userData;\n        sphere.position.y = userData.originalY + Math.sin(time * userData.speed + userData.phase) * 3;\n        sphere.rotation.x += 0.005;\n        sphere.rotation.y += 0.008;\n      });\n\n      // Animate shapes\n      shapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n      });\n\n      // Gentle camera movement\n      camera.position.x = Math.sin(time * 0.1) * 5;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n    };\n\n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n    console.log('Starting WebGL animation...');\n    animate();\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up WebGL...');\n      window.removeEventListener('resize', handleResize);\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n\n      // Clean up Three.js objects\n      scene.traverse(object => {\n        if (object.geometry) {\n          object.geometry.dispose();\n        }\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n      renderer.dispose();\n\n      // Remove canvas from DOM\n      if (currentMount && currentMount.contains(renderer.domElement)) {\n        currentMount.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      zIndex: -1,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(WebGLBackground, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = WebGLBackground;\nexport default WebGLBackground;\nvar _c;\n$RefreshReg$(_c, \"WebGLBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","WebGLBackground","_s","mountRef","current","console","log","currentMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","setClearColor","appendChild","domElement","testGeometry","BoxGeometry","testMaterial","MeshBasicMaterial","color","wireframe","testCube","Mesh","add","spheres","i","geometry","SphereGeometry","material","Color","setHSL","Math","random","transparent","opacity","sphere","position","set","userData","originalY","y","speed","phase","PI","push","shapes","geometries","OctahedronGeometry","TetrahedronGeometry","IcosahedronGeometry","floor","length","shape","rotationSpeed","Vector3","z","animationId","time","animate","requestAnimationFrame","rotation","x","forEach","sin","lookAt","render","handleResize","width","height","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","traverse","object","dispose","Array","isArray","contains","removeChild","ref","style","top","left","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wavestar/Hegemon/src/WebGLBackground.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst WebGLBackground = () => {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n    \n    console.log('Initializing WebGL...');\n    \n    // Store mount reference\n    const currentMount = mountRef.current;\n    \n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    \n    // Configure renderer\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xf0f8ff, 1);\n    currentMount.appendChild(renderer.domElement);\n    \n    // Create a simple test cube to make sure rendering works\n    const testGeometry = new THREE.BoxGeometry(2, 2, 2);\n    const testMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true });\n    const testCube = new THREE.Mesh(testGeometry, testMaterial);\n    scene.add(testCube);\n    \n    // Create floating spheres (data nodes)\n    const spheres = [];\n    for (let i = 0; i < 30; i++) {\n      const geometry = new THREE.SphereGeometry(0.5, 16, 16);\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.6 + Math.random() * 0.2, 0.7, 0.8),\n        transparent: true,\n        opacity: 0.8\n      });\n      \n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set(\n        (Math.random() - 0.5) * 50,\n        (Math.random() - 0.5) * 30,\n        (Math.random() - 0.5) * 30\n      );\n      \n      sphere.userData = {\n        originalY: sphere.position.y,\n        speed: 0.5 + Math.random() * 1.0,\n        phase: Math.random() * Math.PI * 2\n      };\n      \n      spheres.push(sphere);\n      scene.add(sphere);\n    }\n    \n    // Create wireframe geometric shapes\n    const shapes = [];\n    const geometries = [\n      new THREE.OctahedronGeometry(1.5),\n      new THREE.TetrahedronGeometry(2),\n      new THREE.IcosahedronGeometry(1.2)\n    ];\n    \n    for (let i = 0; i < 15; i++) {\n      const geometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.55 + Math.random() * 0.3, 0.6, 0.7),\n        wireframe: true,\n        transparent: true,\n        opacity: 0.6\n      });\n      \n      const shape = new THREE.Mesh(geometry, material);\n      shape.position.set(\n        (Math.random() - 0.5) * 40,\n        (Math.random() - 0.5) * 25,\n        (Math.random() - 0.5) * 25\n      );\n      \n      shape.userData = {\n        rotationSpeed: new THREE.Vector3(\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02,\n          (Math.random() - 0.5) * 0.02\n        )\n      };\n      \n      shapes.push(shape);\n      scene.add(shape);\n    }\n    \n    // Position camera\n    camera.position.z = 25;\n    camera.position.y = 5;\n    \n    // Animation\n    let animationId;\n    let time = 0;\n    \n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n      time += 0.01;\n      \n      // Rotate test cube\n      testCube.rotation.x += 0.01;\n      testCube.rotation.y += 0.01;\n      \n      // Animate spheres\n      spheres.forEach(sphere => {\n        const userData = sphere.userData;\n        sphere.position.y = userData.originalY + Math.sin(time * userData.speed + userData.phase) * 3;\n        sphere.rotation.x += 0.005;\n        sphere.rotation.y += 0.008;\n      });\n      \n      // Animate shapes\n      shapes.forEach(shape => {\n        const userData = shape.userData;\n        shape.rotation.x += userData.rotationSpeed.x;\n        shape.rotation.y += userData.rotationSpeed.y;\n        shape.rotation.z += userData.rotationSpeed.z;\n      });\n      \n      // Gentle camera movement\n      camera.position.x = Math.sin(time * 0.1) * 5;\n      camera.lookAt(0, 0, 0);\n      \n      renderer.render(scene, camera);\n    };\n    \n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    console.log('Starting WebGL animation...');\n    animate();\n    \n    // Cleanup function\n    return () => {\n      console.log('Cleaning up WebGL...');\n      window.removeEventListener('resize', handleResize);\n      \n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      \n      // Clean up Three.js objects\n      scene.traverse((object) => {\n        if (object.geometry) {\n          object.geometry.dispose();\n        }\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n      \n      renderer.dispose();\n      \n      // Remove canvas from DOM\n      if (currentMount && currentMount.contains(renderer.domElement)) {\n        currentMount.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mountRef} \n      style={{ \n        position: 'fixed', \n        top: 0, \n        left: 0, \n        width: '100%', \n        height: '100%', \n        zIndex: -1,\n        pointerEvents: 'none'\n      }} \n    />\n  );\n};\n\nexport default WebGLBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}